import java.io.BufferedReader;import java.io.StringReader;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Vector;import uba.algo3.Utils;public class Board {	private List<List<Integer>> numbers;	private int cuadrante;	private List<Integer> workSet;	static public Board from(String board) {		return new Board(new BufferedReader(new StringReader(board)));	}	public Board(BufferedReader br) {		numbers = new ArrayList();		try {			String line;			while ((line = br.readLine()) != null) {				numbers.add(Utils.parseVector(line));			}		} catch (Exception e) {			throw new RuntimeException(e);		}		cuadrante = (int) Math.sqrt(numbers.size());		workSet = new ArrayList();		for (int i = 1; i <= side(); i++) {			workSet.add(i);		}	}	public int side() {		return numbers.size();	}	public int cuadrante() {		return cuadrante;	}	public List<Integer> workSet() {		return workSet;	}	public int at(int i, int j) {		return numbers.get(i - 1).get(j - 1);	}	public int set(int i, int j, int val) {		return numbers.get(i - 1).set(j - 1, val);	}	public String toString() {		StringBuffer res = new StringBuffer();		for (List<Integer> arrayList : numbers) {			res.append(arrayList);			res.append('\n');		}		return res.toString();	}	public boolean valid() {		return distintos() && completo();	}	public boolean distintos() {		for (int i = 1; i <= side(); ++i) {			if (!distintos(fila(i))) {				return false;			};		}		for (int i = 1; i <= side(); ++i) {			if (!distintos(columna(i)))				return false;		}		for (int i = 1; i <= cuadrante; ++i) {			for (int j = 1; j <= cuadrante; ++j) {				if (!distintos(cuadrante(i, j)))					return false;			}		}		return true;	}	public boolean distintos(List l) {		l.retainAll(workSet);		return l.size() == new HashSet(l).size();	}	public boolean completo() {		for (List arrayList : numbers) {			if (!completo(arrayList)) {				return false;			};		}		return true;	}	public static boolean completo(List v) {		HashSet hs = new HashSet(v);		hs.add(0);		return hs.size() == new HashSet(v).size() + 1;	}	public List columna(int i) {		List columna = new Vector();		for (int j = 1; j <= side(); ++j) {			columna.add(at(j, i));		}		return columna;	}	public List fila(int i) {		List fila = new Vector();		for (int j = 1; j <= side(); ++j) {			fila.add(at(i, j));		}		return fila;	}	public List cuadrante(int i, int j) {		List fila = new Vector();		for (int ii = 1 + (i - 1) * cuadrante; ii <= (i * cuadrante); ++ii) {			for (int jj = 1 + (j - 1) * cuadrante; jj <= (j * cuadrante); ++jj) {				fila.add(at(ii, jj));			}		}		return fila;	}}